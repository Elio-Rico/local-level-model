fig <- plot_ly(x = ~density.1000$x, y = ~density.1000$y, type = 'scatter', mode = 'lines', name = 'N=1000')
fig <- fig %>% add_trace(x = ~density.200$x, y = ~density.200$y, name = 'N=200')
fig <- fig %>% add_trace(x = ~density.100$x, y = ~density.100$y, name = 'N=100')
fig <- fig %>% add_trace(x = ~density.50$x, y = ~density.50$y, name = 'N=50')
fig <- fig %>% layout(xaxis = list(title = 'Distribution of Signal-to-Noise Ratio by MLE'),
yaxis = list(title = 'Density')) %>%
layout(
xaxis = list(
range=c(0,20)
)
)
fig
density.1000 <- density(df.1000$q)
density.200 <- density(df.200$q)
density.100 <- density(df.100$q)
density.50 <- density(df.50$q)
fig <- plot_ly(x = ~density.1000$x, y = ~density.1000$y, type = 'scatter', mode = 'lines', name = 'N=1000')
fig <- fig %>% add_trace(x = ~density.200$x, y = ~density.200$y, name = 'N=200')
fig <- fig %>% add_trace(x = ~density.100$x, y = ~density.100$y, name = 'N=100')
fig <- fig %>% add_trace(x = ~density.50$x, y = ~density.50$y, name = 'N=50')
fig <- fig %>% layout(xaxis = list(title = 'Distribution of Signal-to-Noise Ratio by MLE'),
yaxis = list(title = 'Density')) %>%
layout(
xaxis = list(
range=c(0,100)
)
)
fig
ggplot() +
ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
geom_density(data = df.200, aes(x=q, color = 'n=200')) +
geom_density(data = df.100, aes(x=q,color = 'n=100')) +
geom_density(data = df.50, aes(x=q,color = 'n=50')) +
xlim(c(0,100)) +
geom_vline(xintercept = df.1000$trueq) +
scale_color_manual(values = c('blue','black','red','green'))
#
density.1000 <- density(df.1000$q)
density.200 <- density(df.200$q)
density.100 <- density(df.100$q)
density.50 <- density(df.50$q)
fig <- plot_ly(x = ~density.1000$x, y = ~density.1000$y, type = 'scatter', mode = 'lines', name = 'N=1000')
fig <- fig %>% add_trace(x = ~density.200$x, y = ~density.200$y, name = 'N=200')
fig <- fig %>% add_trace(x = ~density.100$x, y = ~density.100$y, name = 'N=100')
fig <- fig %>% add_trace(x = ~density.50$x, y = ~density.50$y, name = 'N=50')
fig <- fig %>% layout(xaxis = list(title = 'Distribution of Signal-to-Noise Ratio by MLE'),
yaxis = list(title = 'Density')) %>%
layout(
xaxis = list(
range=c(0,100)
),
yaxis = list(
range=c(0,0.6)
)
)
fig
ggplot() +
ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
geom_density(data = df.200, aes(x=q, color = 'n=200')) +
geom_density(data = df.100, aes(x=q,color = 'n=100')) +
geom_density(data = df.50, aes(x=q,color = 'n=50')) +
xlim(c(0,100)) +
geom_vline(xintercept = df.1000$trueq) +
scale_color_manual(values = c('blue','black','red','green'))
#
ggplot() +
ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
geom_density(data = df.200, aes(x=q, color = 'n=200')) +
geom_density(data = df.100, aes(x=q,color = 'n=100')) +
geom_density(data = df.50, aes(x=q,color = 'n=50')) +
xlim(c(0,100)) +
geom_vline(xintercept = df.1000$trueq) +
scale_color_manual(values = c('blue','black','red','green'))
fig <- plot_ly(x = ~density.1000$x, y = ~density.1000$y, type = 'scatter', mode = 'lines', name = 'N=1000')
fig <- fig %>% add_trace(x = ~density.200$x, y = ~density.200$y, name = 'N=200')
fig <- fig %>% layout(xaxis = list(title = 'Distribution of Signal-to-Noise Ratio by MLE'),
yaxis = list(title = 'Density')) %>%
layout(
xaxis = list(
range=c(0,100)
),
yaxis = list(
range=c(0,0.6)
)
)
fig
var.index <- 1
for(i in c(1:number.diff.sample.sizes)){
# Simulate the data for a given variance and the number of time series simulated: loop through the sample sizes
temp <- sim.data(sample.sizes[i], number.simulations, q[var.index])$`q=10`$y
# loop through every simulation generated (note that index 1 and 2 belong to indicators for the time and the variance - hence, start index from 3 to n.s + 2)
for(index in 3:(number.simulations+2)){
y.t <- temp[[index]]
estimates <- stats::optim(fn = Log.Lik.sd, par = c(1,sqrt(10)), method = 'L-BFGS-B')$par
thetas.mle[index-2,,i] <- estimates
}
print(i)
}
# Signal To Noise Ratio: var.eta/var.vareps
df.50 <- as.data.frame(thetas.mle[,,1])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
df.100 <- as.data.frame(thetas.mle[,,2])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
df.200 <- as.data.frame(thetas.mle[,,3])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
df.1000 <- as.data.frame(thetas.mle[,,4])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
ggplot() +
ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
geom_density(data = df.200, aes(x=q, color = 'n=200')) +
geom_density(data = df.100, aes(x=q,color = 'n=100')) +
geom_density(data = df.50, aes(x=q,color = 'n=50')) +
xlim(c(0,100)) +
geom_vline(xintercept = df.1000$trueq) +
scale_color_manual(values = c('blue','black','red','green'))
# Chunk 1: setup
knitr::opts_chunk$set(
echo = FALSE, fig.height = 4, warning = FALSE, out.width = "100%"
)
if (!require("ggplot2")) {install.packages("ggplot2"); library('ggplot2')}
if (!require("tidyverse")) {install.packages("tidyverse"); library('tidyverse')}
if (!require("matrixStats")) {install.packages("matrixStats"); library('matrixStats')}
if (!require("tidymodels")) {install.packages("tidymodels"); library('tidymodels')}
if (!require("lme4")) {install.packages("lme4"); library('lme4')}
if (!require("haven")) {install.packages("haven"); library('haven')}
if (!require("miceadds")) {install.packages("miceadds"); library('miceadds')}
if (!require("rmarkdown")) {install.packages("rmarkdown"); library('rmarkdown')}
if (!require("reshape2")) {install.packages("reshape2"); library('reshape2')}
if (!require("plotly")) {install.packages("plotly"); library('plotly')}
if (!require("knitr")) {install.packages("knitr"); library('knitr')}
if (!require("kableExtra")) {install.packages("kableExtra"); library('kableExtra')}
if (!require("htmltools")) {install.packages("htmltools"); library('htmltools')}
# Chunk 2
# Move this css tag outside the chunk to control the width of text
# on the page.
# <style type="text/css">
# .main-container {
#   max-width: 1000px;
#   margin-left: auto;
#   margin-right: auto;
# }
# </style>
# Chunk 3
# clear variables:
rm(list=ls(all=TRUE))
set.seed(10)
# Simulate all time series
# ------------------------
# Initial conditions
a1 <- 0
p1 <- 10^7
# Starting value for mu
mu.t <- c()
mu.t[1] <- rnorm(1,a1,sqrt(p1))
# Different variances for eta
q <- c(10,1,0.1,0.001)
# Other parameters
var.vareps <- 1
rho <- 1
t <- 100
# State/Transition Equation: Data Generating Process "x": AR(1) process
# ______________________________________________________________________
# Pre-allocate dataframe
df.ts <- data.frame(matrix(NA,nrow = t*(NROW(q)), ncol = 4))
colnames(df.ts) <- c("t","q","y.t","mu.t")
x <- 1
for(var in q){
# DATA GENERATING PROCESS (TRANSITION EQUATION)
for(i in 2:t){
mu.t[i] = mu.t[i-1] + rnorm(mean = 0, sd = sqrt(var), n = 1)
}
# NOISY SIGNAL OBSERVED (MEASUREMENT EQUATION)
y.t <- c()
for(i in 1:t){
y.t[i] = mu.t[i] + rnorm(mean = 0, sd = 1, n = 1)
}
# indexes for dataframe in long format
i1 <- 1 + (t*(x-1))
i2 <- t*x
df.ts[i1:i2,] <- cbind(c(1:t),rep(var,t),y.t,mu.t)
x <- x + 1
}
# put df in long format
df.ts.l <- df.ts %>%
gather(key = key, value = value, y.t:mu.t,-t)
# Plot the different time series
figures <- c()
x <- 1
for(var in q){
if(x < NROW(q)){
bin <- F
} else {
bin <- T
}
fig <- df.ts.l %>%
dplyr::filter(q == var) %>%
print(var) %>%
plot_ly(.,.x = ~t,y = ~value,color = ~key, type = "scatter",mode = "lines",legendgroup = ~key, showlegend = bin, colors = c("#003f5c","#ff6361"), linetype = ~key)
xtitle <- paste('t <br> q =',var)
fig <- fig %>% layout(title=TeX(" \\text{Actual Data } \\mu_t \\text{ and Observed Noisy Signal }  y_t "), xaxis = list(title = xtitle))
figures[x] <- fig
x <- x + 1
}
plot <- subplot(figures, nrows = 1, shareX = T, shareY = T)  %>%
config(mathjax = 'cdn')
# Chunk 4
plot
# Chunk 5
KF <- data.frame(matrix(NA,nrow = t*(NROW(q)), ncol = 9))
colnames(KF) <- c("v.t","k.t","a.t.t","p.t.t","a.t","p.t","y.t","q","t")
x <- 1
for (i in q){
Y.t <- df.ts %>%
dplyr::filter(q == i) %>%
dplyr::select(y.t) %>%
unlist(.)
Mu.t <- df.ts %>%
dplyr::filter(q == i) %>%
dplyr::select(mu.t) %>%
unlist(.)
# var eta
var.eta <- i
# Allocation
A.t <- rep(0, t)
P.t <- rep(0, t)
V.t  <- rep(0, t)
A.t.t <- rep(0, t)
P.t.t <- rep(0, t)
K.t     <- rep(0, t)
# Initialization:
# A.t already initiliazed with 0
P.t[1] <- var.vareps*10^7
for (j in 2:(t)){
V.t[j] <- Y.t[j] - A.t[j-1]
K.t[j] <- P.t[j-1]/(P.t[j-1] + var.vareps)
A.t.t[j] <- A.t[j-1] + K.t[j] * V.t[j]
P.t.t[j] <- K.t[j] * var.vareps
A.t[j] <- A.t.t[j]
P.t[j] <- P.t.t[j] + var.eta
}
# indexes for dataframe
i1 <- 1 + (t*(x-1))
i2 <- t*x
temp <- cbind(V.t,K.t,A.t.t,P.t.t,A.t,P.t,Y.t,i,c(1:t))
rownames(temp) <- NULL
x <- x + 1
KF[i1:i2,] <- temp
}
# Chunk 6
# put df in long format
KF.l <- KF %>%
gather(key = key, value = value, v.t:y.t,-t)
# Plot the different time series
figures <- c()
x <- 1
for(var in q){
if(x < NROW(q)){
bin <- F
} else {
bin <- T
}
fig <- KF.l %>%
dplyr::filter(q == var, key == "y.t" | key == "a.t",t > 2) %>%
print(var) %>%
plot_ly(.,.x = ~t,y = ~value,color = ~key, type = "scatter",mode = "lines",legendgroup = ~key, showlegend = bin, colors = c("#ffa600","#ff6361"), linetype = ~key)
xtitle <- paste('t <br> q =',var)
fig <- fig %>% layout(title=TeX(" \\text{Observed Data } y_t \\text{ and Filtered Data }  a_{t|t} "), xaxis = list(title = xtitle))
figures[x] <- fig
x <- x + 1
}
plot <- subplot(figures, nrows = 1, shareX = T, shareY = T)  %>%
config(mathjax = 'cdn')
# Chunk 7
plot
# Chunk 8
# Plot the different time series
figures <- c()
x <- 1
for(var in q){
if(x < NROW(q)){
bin <- F
} else {
bin <- T
}
fig <- KF.l %>%
dplyr::filter(q == var, key == "k.t" ,t > 2) %>%
print(var) %>%
plot_ly(.,.x = ~t,y = ~value,color = ~key, type = "scatter",mode = "lines",legendgroup = ~key, showlegend = bin, colors = c("#0e8f62"), linetype = ~key)
xtitle <- paste('t <br> q =',var)
fig <- fig %>% layout(title=TeX(" \\text{Kalman Gain } k_t  "), xaxis = list(title = xtitle))
figures[x] <- fig
x <- x + 1
}
plot <- subplot(figures, nrows = 1, shareX = T, shareY = T)  %>%
config(mathjax = 'cdn')
# Chunk 9
plot
# Chunk 10
sim.data = function(length.series, number.sims,variances){
# Function to simulate the Transition and Measurement Equation for different variances.
# length.series refers to the number of time periods for each series. number.sims refers to the number of series generated.
# Variances refer to a vector of variances for the Transition Equation (true data generating process)
output <- list()
# Initial conditions
a1 <- 0
p1 <- 10^7
# Starting value for mu
mu.t <- c()
mu.t[1] <- rnorm(1,a1,sqrt(p1))
df.series <- data.frame(matrix(NA,nrow = length.series, ncol = 5))
ts <- data.frame()
for(var in variances){
all.mu <- data.frame(t=1:length.series,q = var)
all.y <- data.frame(t=1:length.series,q = var)
for(sim.quant in 1:number.sims){ # number of time series generated
# DATA GENERATING PROCESS (TRANSITION EQUATION)
for(i in c(2:length.series)){
mu.t[i] = mu.t[i-1] + rnorm(mean = 0, sd = sqrt(var), n = 1)
}
# NOISY SIGNAL OBSERVED (MEASUREMENT EQUATION)
y.t <- c()
for(i in 1:length.series){
y.t[i] = mu.t[i] + rnorm(mean = 0, sd = 1, n = 1)
}
all.mu <- cbind(all.mu, mu.t)
all.y <- cbind(all.y, y.t)
colnames(all.mu)[sim.quant+2] = sim.quant
colnames(all.y)[sim.quant+2] = sim.quant
}
list.oneq <- list(as.list(all.mu),as.list(all.y))
names(list.oneq) <- c("mu","y")
output[[length(output)+1]] <- list.oneq
}
names(output) = paste0("q=",variances)
return(output)
}
# Chunk 11
# All series
data.50 <- sim.data(50, 100,q)
data.100 <- sim.data(100, 100,q)
data.200 <- sim.data(200, 100,q)
data.1000 <- sim.data(1000, 100,q)
# PLOT DATA GENEARTING PROCESS FOR Q = 0.001 AND Q = 10 FOR T=100:
t1 <- data.100$`q=0.1`$mu
t2 <- data.100$`q=0.001`$mu
figures <- c()
#colors = c("#003f5c","#ff6361")
fig1 <- do.call(cbind.data.frame, t1) %>%
dplyr::select(-q)   %>%
gather(key=key,value=value,-t) %>%
group_by(key) %>%
plot_ly(.,.x = ~t,y = ~value,color = ~key, type = "scatter",mode = "lines",legendgroup = ~key, showlegend = F, colors = c("#003f5c"))
xtitle <- paste('t <br> q =',t1$q[1])
fig1 <- fig1 %>% layout(title="Simulated Series", xaxis = list(title = xtitle), yaxis = list(title = "Value"))
fig2 <-do.call(cbind.data.frame, t2) %>%
dplyr::select(-q)   %>%
gather(key=key,value=value,-t) %>%
group_by(key) %>%
plot_ly(.,.x = ~t,y = ~value,color = ~key, type = "scatter",mode = "lines",legendgroup = ~key, showlegend = F, colors = c("#003f5c"))
xtitle <- paste('t <br> q =',t2$q[1])
fig2 <- fig2 %>% layout(title=TeX(" \\text{Simulated Time Series for Transition Equation } \\mu_t  "), xaxis = list(title = xtitle), yaxis = list(title = "Value"))
figures[1] <- fig1
figures[2] <- fig2
plot <- subplot(figures, nrows = 1, shareX = T, shareY = T)  %>%
config(mathjax = 'cdn')
# Chunk 12
plot
# Chunk 13
Kalman.Filter.sd <- function(y.t,sd.vareps,sd.eta){
# As input, signal y.t is needed and the variances of the noise in the transition and measurement equation
t <- length(y.t)
# Allocation
df.KF <- c()
a.t <- rep(0, t)
p.t <- rep(0, t)
v.t  <- rep(0, t)
a.t.t <- rep(0, t)
p.t.t <- rep(0, t)
k.t     <- rep(0, t)
f.t     <- rep(0, t)
# Initialization:
# A.t already initiliazed with 0
p.t[1] <- (sd.vareps)^2*10^7
for (j in c(2:t)){
v.t[j] <- y.t[j] - a.t[j-1]
k.t[j] <- p.t[j-1]/(p.t[j-1] + (sd.vareps)^2)
a.t.t[j] <- a.t[j-1] + k.t[j] * v.t[j]
p.t.t[j] <- k.t[j] * (sd.vareps)^2
# For log-likelihood:
f.t[j] <- (p.t[j-1] + (sd.vareps)^2)
# update
a.t[j] <- a.t.t[j]
p.t[j] <- p.t.t[j] + sd.eta^2
}
var.eta <- sd.eta^2
temp <- cbind(v.t,k.t,a.t.t,p.t.t,a.t,p.t,f.t,y.t,var.eta,c(0:(t-1))) # we discard the initial observation
rownames(temp) <- NULL
df.KF<- as.data.frame(temp[2:t,] )
return(df.KF)
}
# Chunk 14
# Log.Lik <- function(thetas){
#
#   df.KF <- Kalman.Filter(y.t, thetas[1], thetas[2]) #y.t,var.vareps,var.eta
#
#   log.lik <- -0.5*(NROW(df.KF))*log(2*pi) - 0.5 * sum(log(df.KF$f.t),na.rm=T) - 0.5 * sum((df.KF$v.t^2)/(df.KF$f.t), na.rm = T)
#
#   return(-log.lik)
# }
Log.Lik.sd <- function(thetas){
df.KF <- Kalman.Filter.sd(y.t, thetas[1], thetas[2]) #y.t,var.vareps,var.eta
log.lik <- -0.5*(NROW(df.KF))*log(2*pi) - 0.5 * sum(log(df.KF$f.t),na.rm=T) - 0.5 * sum((df.KF$v.t^2)/(df.KF$f.t), na.rm = T)
return(-log.lik)
}
# Chunk 15
# prepare the array to store all estimated thetas:
sample.sizes <- c(50,100,200,1000)
number.simulations <- 100
number.diff.sample.sizes <- length(sample.sizes)
thetas.mle = array(NA, dim <- c(number.simulations,2,number.diff.sample.sizes)) # creates a 3-dim array to store, for each simulated series, the estimated values of the two tetas, for all different sample sizes
# Chunk 16
# we simulate the data again such that we can easily vary the sample sizes
# Var 10:
# --------
# var.index <- 1
# for(i in c(1:number.diff.sample.sizes)){
#
#   # Simulate the data for a given variance and the number of time series simulated: loop through the sample sizes
#   temp <- sim.data(sample.sizes[i], number.simulations, q[var.index])$`q=10`$y
#
#   # loop through every simulation generated (note that index 1 and 2 belong to indicators for the time and the variance - hence, start index from 3 to n.s + 2)
#   for(index in 3:(number.simulations+2)){
#
#     y.t <- temp[[index]]
#
#     estimates <- stats::optim(fn = Log.Lik, par = c(1,q[var.index]), method = 'L-BFGS-B',lower = rep(2,0))$par
#
#     thetas.mle[index-2,,i] <- estimates
#
#   }
#
#   print(i)
#
# }
# STANDARD DEVIATION
var.index <- 1
for(i in c(1:number.diff.sample.sizes)){
# Simulate the data for a given variance and the number of time series simulated: loop through the sample sizes
temp <- sim.data(sample.sizes[i], number.simulations, q[var.index])$`q=10`$y
# loop through every simulation generated (note that index 1 and 2 belong to indicators for the time and the variance - hence, start index from 3 to n.s + 2)
for(index in 3:(number.simulations+2)){
y.t <- temp[[index]]
estimates <- stats::optim(fn = Log.Lik.sd, par = c(1,sqrt(10)), method = 'L-BFGS-B')$par
thetas.mle[index-2,,i] <- estimates
}
print(i)
}
# Signal To Noise Ratio: var.eta/var.vareps
df.50 <- as.data.frame(thetas.mle[,,1])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
df.100 <- as.data.frame(thetas.mle[,,2])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
df.200 <- as.data.frame(thetas.mle[,,3])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
df.1000 <- as.data.frame(thetas.mle[,,4])  %>%
mutate(trueq = q[var.index]/var.vareps) %>%
mutate(q = V2^2/V1^2)
ggplot() +
ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
geom_density(data = df.200, aes(x=q, color = 'n=200')) +
geom_density(data = df.100, aes(x=q,color = 'n=100')) +
geom_density(data = df.50, aes(x=q,color = 'n=50')) +
xlim(c(0,100)) +
geom_vline(xintercept = df.1000$trueq) +
scale_color_manual(values = c('blue','black','red','green'))
#
# fig1 <- ggplot() +
#   ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
#   geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
#   xlim(c(-5,100)) +
#   geom_vline(xintercept = df.1000$trueq) +
#   scale_color_manual(values = c('blue'))
# fig1
ggplot() +
ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
geom_density(data = df.200, aes(x=q, color = 'n=200')) +
geom_density(data = df.100, aes(x=q,color = 'n=100')) +
geom_density(data = df.50, aes(x=q,color = 'n=50')) +
xlim(c(0,20)) +
geom_vline(xintercept = df.1000$trueq) +
scale_color_manual(values = c('blue','black','red','green'))
#
# fig1 <- ggplot() +
#   ggtitle("Distribution of Signal-to-Noise Ratio by MLE") +
#   geom_density(data = df.1000, aes(x=q, color = 'n=1000')) +
#   xlim(c(-5,100)) +
#   geom_vline(xintercept = df.1000$trueq) +
#   scale_color_manual(values = c('blue'))
# fig1
